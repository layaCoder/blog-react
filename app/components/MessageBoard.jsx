import React, { Component } from 'react'
import { Row, Col, Avatar, Input, Button } from 'antd';
import axios from 'axios'
import APIS from '../api/index'
require('../assets/styles/MessageBoard.scss')
import emojiPack from '../api/emojiUrl'
import * as untils from '../utils/commUtils.js'
import E from 'wangeditor'

import MsgBoardItem from './parts/MsgBoardItem'

export default class Home extends Component {
    constructor(props) {
        super(props)
        this.state = {
            author: '',
            msgText: '',
            msgData: []
        }
    }

    initMsgList = () => {
        let url = APIS.getMsgList.devUrl + '?pageIndex=' + 1 + '&pageSize=10'
        axios.get(url).then(res => {
            console.log('res', res)
            this.setState({ msgData: res.data })
        })
    }

    componentDidMount() {
        this.initEditor()
        this.initMsgList()
    }

    initEditor() {
        const toolBar = this.refs.editorMenu
        const elem = this.refs.editorElem
        const editor = new E(toolBar, elem)

        this.editor = editor
        editor.customConfig.emotions = [

            {
                // tab ÁöÑÊ†áÈ¢ò
                title: 'emoji',
                // type -> 'emoji' / 'image'
                type: 'emoji',
                // content -> Êï∞ÁªÑ
                content: ['üòÄ', 'üòÅ', 'üòÇ', 'ü§£', 'üòÉ', 'üòÑ', 'üòÖ', 'üòÜ', 'üòâ', 'üòä', 'üòã', 'üòé', 'üòç', 'üòò',
                    'üòó', 'üòô', 'üòö', 'üôÇ', 'ü§ó', 'ü§î', 'üòê', 'üòë', 'üò∂', 'üôÑ', 'üòè', 'üò£', 'üò•', 'üòÆ', 'ü§ê', 'üòØ',
                    'üò™', 'üò´', 'üò¥', 'üòå', 'üòõ', 'üòú', 'üòù', 'ü§§', 'üòí', 'ü§ì', 'üòà', 'üëø', 'üëπ', 'üë∫', 'üíÄ', 'üëª',
                    'üëΩ', 'ü§ñ', 'üí©', 'üò∫', 'üò∏', 'üòπ', 'üòª', 'üòº', 'üòΩ', 'üôÄ', 'üòø', 'üòæ']
            },
            //‰ªéapiÂú∞ÂùÄÂä†ËΩΩË°®ÊÉÖÂåÖ
            emojiPack
        ]


        editor.customConfig.zIndex = 100
        editor.customConfig.uploadImgServer = APIS.saveBlogImage.devUrl
        // ÈôêÂà∂‰∏ÄÊ¨°ÊúÄÂ§ö‰∏ä‰º† 1 Âº†ÂõæÁâá
        editor.customConfig.uploadImgMaxLength = 1
        // editor.customConfig.uploadFileName = 'yourFileName' //ËÆæÁΩÆÊñá‰ª∂Âêç
        editor.customConfig.customUploadImg = function (files, insert) {
            // files ÊòØ input ‰∏≠ÈÄâ‰∏≠ÁöÑÊñá‰ª∂ÂàóË°®
            console.log(files)
            if (files[0]) {
                const formData = new window.FormData()
                formData.append('file', files[0], 'cover.jpg') //Â∞ÜÊñá‰ª∂‰º†ÂÖ•Âà∞fomData‰∏≠
                instanceAxios({
                    method: "post",
                    url: APIS.saveBlogImage.devUrl,
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                        //'Content-type': 'application/x-www-form-urlencoded'
                        //'Content-type': 'application/json'
                    },
                    data: formData,
                }
                ).then(res => {
                    if (res.data[0]) {
                        insert(res.data[0].imageUrl) //‰∏ä‰º†ÊúçÂä°Âô®ÂêéÔºåÂ∞ÜurlÂú∞ÂùÄËøîÂõûÔºåÊèíÂÖ•htmlÁâáÊÆµ‰∏≠
                    }
                    else {
                        console.log(res.data)
                    }
                })
            } else {
                message.info('plz choose your pictureÔºÅ')
            }
        }
        editor.customConfig.menus = [
            'head', // Ê†áÈ¢ò
            'bold', // Á≤ó‰Ωì
            'fontSize', // Â≠óÂè∑
            // 'fontName', // Â≠ó‰Ωì
            'italic', // Êñú‰Ωì
            'underline', // ‰∏ãÂàíÁ∫ø
            'strikeThrough', // Âà†Èô§Á∫ø
            'foreColor', // ÊñáÂ≠óÈ¢úËâ≤
            'backColor', // ËÉåÊôØÈ¢úËâ≤
            'link', // ÊèíÂÖ•ÈìæÊé•
            'list', // ÂàóË°®
            'justify', // ÂØπÈΩêÊñπÂºè
            'quote', // ÂºïÁî®
            'emoticon', // Ë°®ÊÉÖ
            'image', // ÊèíÂÖ•ÂõæÁâá
            // 'table', // Ë°®Ê†º
            // 'video', // ÊèíÂÖ•ËßÜÈ¢ë
            'code', // ÊèíÂÖ•‰ª£Á†Å
            //'undo', // Êí§ÈîÄ
            // 'redo' // ÈáçÂ§ç
        ]
        editor.customConfig.lang = {
            'ËÆæÁΩÆÊ†áÈ¢ò': 'Title',
            'Â≠óÂè∑': 'Size',
            'ÊñáÂ≠óÈ¢úËâ≤': 'Color',
            'ËÆæÁΩÆÂàóË°®': 'List',
            'ÊúâÂ∫èÂàóË°®': '',
            'Êó†Â∫èÂàóË°®': '',
            'ÂØπÈΩêÊñπÂºè': 'Align',
            'Èù†Â∑¶': '',
            'Â±Ö‰∏≠': '',
            'Èù†Âè≥': '',
            'Ê≠£Êñá': 'p',
            'ÈìæÊé•ÊñáÂ≠ó': 'link text',
            'ÈìæÊé•': 'link',
            '‰∏ä‰º†ÂõæÁâá': 'Upload',
            'ÁΩëÁªúÂõæÁâá': 'Web',
            'ÂõæÁâálink': 'image url',
            'ÊèíÂÖ•ËßÜÈ¢ë': 'Video',
            'Ê†ºÂºèÂ¶Ç': 'format',
            '‰∏ä‰º†': 'Upload',
            'ÂàõÂª∫': 'init'
        }
        editor.create()
    }

    inputAuthor = (e) => {
        this.setState({ author: e.target.value })
    }

    handleSubmit = () => {
        if (!this.state.author || untils.delHtmlTag(this.editor.txt.html()).length < 2) {
            alert('author or content can not be null!!!')
            return
        }

        /* Ëé∑ÂèñÊñáÊú¨ÁºñËæëÂô®value */
        let htmlStr = this.editor.txt.html()
        let postUrl = APIS.saveBoardMsg.devUrl
        let role = this.state.author === 'laya' ? 0 : 1
        let avatarUrl = this.state.author === 'laya' ? 'http://39.105.188.13:2000/images/laya.png' : 'http://39.105.188.13:2000/images/guest.png'
        axios({
            method: 'post',
            url: postUrl,
            headers: {
                'Content-type': 'application/json'
            },
            data: {
                author: this.state.author,
                content: htmlStr,
                role: role,
                avatarUrl: avatarUrl
            }
        }).then(res => {
            this.editor.txt.html('')//Ê∏ÖÁ©∫ÁºñËæëÂô®
            this.initBlogList()
        })
    }

    render() {
        return (
            <div className='msgBoard-div'>
                <Row className='msgBoard-row'>
                    <h2 className='msgBoard-title'>Message Board</h2>
                </Row>
                <Row className='msgBoard-row'>
                        {this.state.msgData.map(item => {
                            return <MsgBoardItem msgItem={item} />
                        })}
                </Row>
                {/* ÊñáÊú¨ÁºñËæëÂô®ÔºåtodoÔºöÊç¢Êàê markdown */}
                <Row className='msgBoard-row'>
                    <Row className='input-name-row'>
                        <Col span={2} offset={1}>
                            <Avatar src='http://39.105.188.13:2000/images/laya.png'></Avatar>
                        </Col>
                        <Col span={20}>
                            <Input placeholder='plz input your name' onChange={this.inputAuthor} value={this.state.author} />
                        </Col>
                    </Row>
                    <Row>
                        <Col span={20} offset={3}>
                            <div>
                                <div ref="editorMenu" style={{ backgroundColor: '#FAFAFA', border: 'solid 1px #d9d9d9', borderRadius: '5px 5px 0px 0px' }}></div>
                            </div>
                            <div style={{ border: '#d9d9d9 solid 1px', borderTop: '0px', borderRadius: '0px 0px 5px 5px' }}>
                                <div ref='editorElem' style={{ textAlign: 'left', height: '200px', maxHeight: '500px' }} />
                            </div>
                        </Col>
                    </Row>
                    <Row>
                        <Col offset={22} span={1} >
                            <div className='submit-btn'>
                                <Button onClick={this.handleSubmit}>Submit</Button>
                            </div>
                        </Col>
                    </Row>
                </Row>
            </div>
        )
    }
}